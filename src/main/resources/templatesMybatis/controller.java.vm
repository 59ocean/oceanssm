package ${package.Controller};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.alibaba.fastjson.JSON;
import com.ocean.utils.PageResult;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;
import com.ocean.utils.AjaxResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import com.ocean.query.${entity}Query;
import org.springframework.web.servlet.ModelAndView;
/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
public ${table.serviceName} ${table.entityPath}Service;

	/**
	 * 跳转列表页面
	 * @param request
	 * @return
	 */
	@RequestMapping(method= RequestMethod.GET,value = "/toList")
	public ModelAndView to${table.entityPath}List(HttpServletRequest request) {
		return new ModelAndView("${table.entityPath}/${table.entityPath}_list");
	}

	/**
	 * 分页查询数据
	 *
	 * @param query   查询条件
	 * @return
	 */
	@ResponseBody
	@GetMapping("/list")
	public PageResult get${entity}List(${entity}Query query) {
        Page<${entity}> page = ${table.entityPath}Service.selectPage(query);
        return PageResult.ok(page.getTotal(),page.getRecords());
	}

	/**
	 * 跳转添加页面
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(method=RequestMethod.GET,value="/toAdd")
	public String ${table.entityPath}Add(HttpServletRequest request,HttpServletResponse response) {
		try {


		}catch (Exception ex){
		logger.error("${table.entityPath}Add -=- {}",ex.toString());
		}
		return "${table.entityPath}/${table.entityPath}_add";
	}
	/**
	 * 保存
	 * @param ${table.entityPath}  传递的实体
	 * @return  0 失败  1 成功
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.POST,value="/save")
	public AjaxResponse ${table.entityPath}Save(${entity} ${table.entityPath}) {
		AjaxResponse result = null;
		try {
			saveBaseEntity(${table.entityPath});
			${table.entityPath}Service.save(${table.entityPath});
			result = AjaxResponse.ok();
		} catch (Exception e) {
			logger.error("${table.entityPath}Save -=- {}",e.toString());
			result = AjaxResponse.errorMsg(e.toString());
		}
		return result;
	}

	/**
	 * 跳转修改页面
	 * @param request
	 * @param id  实体ID
	 * @return
	 */
	@RequestMapping(method=RequestMethod.GET,value="/toEdit")
	public String to${table.entityPath}Edit(HttpServletRequest request,String id) {
		try {
			${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
			request.setAttribute("${table.entityPath}",${table.entityPath});
		}catch (Exception ex){
			logger.error("${table.entityPath}Update -=- {}",ex.toString());
		}
		return "${table.entityPath}/${table.entityPath}_edit";
	}

	/**
	* 更新
	* @param ${table.entityPath}  传递的实体
	* @return  0 失败  1 成功
	*/
	@ResponseBody
	@RequestMapping(method=RequestMethod.POST,value="/update")
	public AjaxResponse ${table.entityPath}Update(${entity} ${table.entityPath}) {
        AjaxResponse result = null;
		try {
			updateBaseEntity(${table.entityPath});
			${table.entityPath}Service.updateById(${table.entityPath});
			result = AjaxResponse.ok();
		} catch (Exception e) {
			logger.error("${table.entityPath}Save -=- {}",e.toString());
			result = AjaxResponse.errorMsg(e.toString());
		}
		return result;
	}

	/**
	 * 跳转詳情页面
	 * @param request
	 * @param id  实体ID
	 * @return
	 */
	@RequestMapping(method=RequestMethod.GET,value="/view")
	public String view(HttpServletRequest request,String id) {
		try {
			${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
			request.setAttribute("${table.entityPath}",${table.entityPath});
		}catch (Exception ex){
			logger.error("${table.entityPath}Update -=- {}",ex.toString());
		}
		return "${table.entityPath}/${table.entityPath}_view";
	}

	/**
	 * 根据id删除对象
	 * @param id  实体ID
	 * @return 0 失败  1 成功
	 */
	@ResponseBody
	@RequestMapping(method= RequestMethod.POST,value="/delete")
	public AjaxResponse ${table.entityPath}Delete(String id){
        AjaxResponse result = null;
		try {
	        ${table.entityPath}Service.removeById(id);
			result = AjaxResponse.ok();
		}catch (Exception e){
			logger.error("${table.entityPath}Delete -=- {}",e.toString());
			result = AjaxResponse.errorMsg(e.toString());
		}
		return result;
	}

	/**
	 * 批量删除对象
	 * @param item 实体集合ID
	 * @return  0 失败  1 成功
	 */
	@ResponseBody
	@RequestMapping(method= RequestMethod.POST,value="/batchDelete")
	public AjaxResponse deleteBatchIds(String item){
        AjaxResponse result = null;
        try {
			List<String> ids = (List<String>) JSON.parse(item);
			${table.entityPath}Service.removeByIds(ids);
			result = AjaxResponse.ok();
        }catch (Exception e){
			e.printStackTrace();
			logger.error("${table.entityPath}Delete -=- {}",e.toString());
			result = AjaxResponse.errorMsg(e.getMessage());
        }
        return result;
	}


}